// server.ts
import express from "express";
import type { Request, Response } from "express";
import http from "http";
import cors from "cors";
import { Server } from "socket.io";
import { prisma } from "./src/lib/prisma.js"; // Upewnij siÄ™, Å¼e rozszerzenie to .js, jeÅ›li uÅ¼ywasz TS z ESM

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*",
  },
});

app.use(cors());
app.use(express.json());

// ===================
// GET /api/post
// ===================
app.get("/api/post", async (req: Request, res: Response) => {
  try {
    const posts = await prisma.post.findMany({
      orderBy: { createdAt: "desc" },
    });
    res.status(200).json(posts);
  } catch (error) {
    console.error("BÅ‚Ä…d przy pobieraniu postÃ³w:", error);
    res.status(500).json({ error: "WystÄ…piÅ‚ bÅ‚Ä…d podczas pobierania postÃ³w." });
  }
});

// ===================
// POST /api/post
// ===================
app.post("/api/post", async (req: Request, res: Response) => {
  const { message } = req.body;

  if (!message || typeof message !== "string") {
    return res.status(400).json({ error: "Brak wiadomoÅ›ci lub niepoprawny format" });
  }

  try {
    const post = await prisma.post.create({
      data: { message },
    });

    io.emit("new-post", post); // emituj post do klientÃ³w
    res.status(201).json(post);
  } catch (error) {
    console.error("BÅ‚Ä…d przy tworzeniu posta:", error);
    res.status(500).json({ error: "WystÄ…piÅ‚ bÅ‚Ä…d podczas zapisywania posta." });
  }
});

// ===================
// WebSocket
// ===================
io.on("connection", (socket) => {
  console.log("ğŸŸ¢ Klient poÅ‚Ä…czony przez WebSocket");
});

// ===================
// Uruchom serwer
// ===================
server.listen(3001, () => {
  console.log("ğŸš€ Serwer dziaÅ‚a na http://localhost:3001");
});
